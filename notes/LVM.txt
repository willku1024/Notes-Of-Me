pv: physical volume
vg: volume group
lv: logical volume

pv: pvcreate, pvremove, pvscan, pvdisplay, pvmove, pvs

vg: vgcreate, vgremove, vgextend, vgreduce, vgs, vgdisplay, vgscan
	vgcreate -s # VG_NAME /PATH/TO/PV:设定PE的size

lv: lvcreate, lvremove, lvextend, lvreduce, lvs, lvdisplay

example:
root# pvcreate /dev/sda{10,11}
root# pvscan
root# vgs (查看已经有的vg) 
root# vgcreate myvg /dev/sda{10,11}
root# vgdisplay myvg

root# pvdisplay /dev/sda10 (加入vg之后,pv的PE有了大小信息)
root# pvs  (查看已经有的pv)
root# pvmove /dev/sda11
root# vgreduce myvg /dev/sda11

root# lvcreate  -n LV_NAME  -L # VG_NAME
root# umount /mnt
root# lvremove /dev/VG_NAME/LV_NAME 或 /dev/mapper/VG_NAME-LV_NAME


物理边界:分区  
逻辑边界:文件系统

一、扩展逻辑卷(先拓展物理边界,再拓展逻辑边界)
root# lvextend -L [+]#   /dev/myvg/testlv
	  // 2G, +3G 有+号代表加上#G的空间,无+号代表扩展到#G
root# resize2fs -p /dev/myvg/testlv   
	  //能扩展多大,就扩展到多大,不用指定大小

二、缩小逻辑卷(先拓展逻辑边界,再拓展物理边界)
注意: 1，在线的拓展、离线的缩小
	  2，确保缩减后的空间大小依然能存储原有的所有数据
	  3，在缩减之前先强行检查文件系统，以确保文件系统一直处于移植状态

root# df -lh
root# umount /PATH/TO/LV
root# e2fsck -f /PATH/TO/LV
root# resize2fs /PATH/TO/LV 3G
root# lvreduce -L [-]# /PATH/TO/LV
			
三、快照卷
注意:1，生命周期为整个数据的时长。在这段时长内，数据的增长量不能超出快照卷大小
	 2，快照卷应该是只读的
	 3，跟原卷在同一卷组内

lvcreate 
	-s
	-p r|w

root# lvcreate -L # -n SVL_NAME -p r /PATH/TO/LV 


























